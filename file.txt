//NHIỆM VỤ 2

/*******************************************************************************
 *
 * Description: Lab2 - Bai 2
 * Project name:
 *
 *
 * Last Changed By:  $Author: TrungNT $
 * Revision:         $Revision: 1.0 $
 * Last Changed:     $Date: 24/9/2021 $
 *
 ******************************************************************************/
/**Libraries******************************************************************/

#include <stdint.h>
#include <nv3_gpio.h>
#include <nv3_rcc.h>
#include <typedefs.h>
#define	LOW								0
#define BTN_PRESS							LOW
// Define Logic GPIO_PIN

#define GPIO_PIN_SET						1
#define GPIO_PIN_RESET						0
#define GPIO_PIN_LOW						0
#define GPIO_PIN_HIGH						1

// Define GPIO PIN

#define LEDRED_GPIO_PORT					GPIOB
#define LEDRED_GPIO_PIN						GPIO_Pin_13
#define LEDRED_PIN9							13
#define LEDREDControl_SetClock				RCC_AHB1Periph_GPIOB

#define LEDBLUE_GPIO_PORT					GPIOA
#define LEDBLUE_GPIO_PIN						GPIO_Pin_10
#define LEDBLUE_PIN10							10
#define LEDBLUEControl_SetClock				RCC_AHB1Periph_GPIOA


#define LEDGREEN_GPIO_PORT					GPIOA
#define LEDGREEN_GPIO_PIN						GPIO_Pin_0
#define LEDGREEN_PIN0						0
#define LEDGREENControl_SetClock				RCC_AHB1Periph_GPIOA


#define BUTTON_GPIO_PORT					GPIOB
#define BUTTON_GPIO_PIN						GPIO_Pin_4
#define BUTTON_PIN4							4
#define BUTTONControl_SetClock				RCC_AHB1Periph_GPIOB

#define BUTTON3_GPIO_PORT					GPIOA
#define BUTTON3_GPIO_PIN						GPIO_Pin_4
#define BUTTON3_PIN4							4
#define BUTTON3Control_SetClock				RCC_AHB1Periph_GPIOA


#define BUTTON2_GPIO_PORT					GPIOB
#define BUTTON2_GPIO_PIN						GPIO_Pin_3
#define BUTTON2_PIN4							3
#define BUTTON2Control_SetClock				RCC_AHB1Periph_GPIOB

#define BUTTON4_GPIO_PORT					GPIOB
#define BUTTON4_GPIO_PIN						GPIO_Pin_0
#define BUTTON4_PIN0							0
#define BUTTON4Control_SetClock				RCC_AHB1Periph_GPIOB


#define BUZZER_GPIO_PORT					GPIOC
#define BUZZER_GPIO_PIN						GPIO_Pin_9
#define BUZZERControl_SetClock				RCC_AHB1Periph_GPIOC


static void_t buzzer_Init(void_t);
static void_t buzzerControlSetStatus(GPIO_TypeDef *pGPIOx, u16_t wGPIO_Pin, u8_t byStatus);

static void_t buzzer_Init(void_t) {
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(BUZZERControl_SetClock, ENABLE);


	GPIO_InitStructure.GPIO_Pin = BUZZER_GPIO_PIN;


	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;


	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;


	GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStructure);

}


static void_t buzzerControlSetStatus(GPIO_TypeDef *pGPIOx, u16_t wGPIO_Pin,
		u8_t byStatus) {
	// SET bit in BSRR Registers

	if (byStatus == GPIO_PIN_SET) {
		pGPIOx->BSRRL = wGPIO_Pin;
	}
	if (byStatus == GPIO_PIN_RESET) {
		pGPIOx->BSRRH = wGPIO_Pin;
	}
}



void delay() {
	for (uint32_t i = 0; i < 500000; i++)
		;
}


void delay1() {
	for (uint32_t i = 0; i < 200000; i++)
		;
}

static void LEDRED_init(void) {
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDREDControl_SetClock, ENABLE);

	// chon chan su dung chuc nang dieu khien led

	GPIO_InitStructure.GPIO_Pin = LEDRED_GPIO_PIN;

	//Chon chan dieu khien led che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;

	// khoi tao cac gia tri

	GPIO_Init(LEDRED_GPIO_PORT, &GPIO_InitStructure);

}


static void LEDBLUE_init(void) {
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDBLUEControl_SetClock, ENABLE);

	// chon chan su dung chuc nang dieu khien led

	GPIO_InitStructure.GPIO_Pin = LEDBLUE_GPIO_PIN;

	//Chon chan dieu khien led che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;

	// khoi tao cac gia tri

	GPIO_Init(LEDBLUE_GPIO_PORT, &GPIO_InitStructure);

}

static void LEDGREEN_init(void) {
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDGREENControl_SetClock, ENABLE);

	// chon chan su dung chuc nang dieu khien led

	GPIO_InitStructure.GPIO_Pin = LEDGREEN_GPIO_PIN;

	//Chon chan dieu khien led che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;

	// khoi tao cac gia tri

	GPIO_Init(LEDGREEN_GPIO_PORT, &GPIO_InitStructure);

}



static void Button_init(void) {   //BUTTON5
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A

	RCC_AHB1PeriphClockCmd(BUTTONControl_SetClock, ENABLE);

	// chon chan su dung chuc nang dieu khien nut nhan

	GPIO_InitStructure.GPIO_Pin = BUTTON_GPIO_PIN;

	//Chon chan dieu khien nut che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	// speed cÃ ng cao xung cÃ ng cao thÃ¬ xung cÃ ng thoáº£i

	// trang thai ban dau tren chan la Pull up

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;

	// khoi tao cac gia tri

	GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStructure);
}


static void Button3_init(void) {
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A

	RCC_AHB1PeriphClockCmd(BUTTON3Control_SetClock, ENABLE);

	// chon chan su dung chuc nang dieu khien nut nhan

	GPIO_InitStructure.GPIO_Pin = BUTTON3_GPIO_PIN;

	//Chon chan dieu khien nut che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	// speed cÃ ng cao xung cÃ ng cao thÃ¬ xung cÃ ng thoáº£i

	// trang thai ban dau tren chan la Pull up

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;

	// khoi tao cac gia tri

	GPIO_Init(BUTTON3_GPIO_PORT, &GPIO_InitStructure);
}

static void Button2_init(void) {
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A

	RCC_AHB1PeriphClockCmd(BUTTON2Control_SetClock, ENABLE);

	// chon chan su dung chuc nang dieu khien nut nhan

	GPIO_InitStructure.GPIO_Pin = BUTTON2_GPIO_PIN;

	//Chon chan dieu khien nut che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	// speed cÃ ng cao xung cÃ ng cao thÃ¬ xung cÃ ng thoáº£i

	// trang thai ban dau tren chan la Pull up

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;

	// khoi tao cac gia tri

	GPIO_Init(BUTTON2_GPIO_PORT, &GPIO_InitStructure);
}


static void Button4_init(void) {
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A

	RCC_AHB1PeriphClockCmd(BUTTON4Control_SetClock, ENABLE);

	// chon chan su dung chuc nang dieu khien nut nhan

	GPIO_InitStructure.GPIO_Pin = BUTTON4_GPIO_PIN;

	//Chon chan dieu khien nut che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	// speed cÃ ng cao xung cÃ ng cao thÃ¬ xung cÃ ng thoáº£i

	// trang thai ban dau tren chan la Pull up

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;

	// khoi tao cac gia tri

	GPIO_Init(BUTTON4_GPIO_PORT, &GPIO_InitStructure);
}



static void LEDControl_SetStatus(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN,
		uint8_t Status) {
	// SET bit in BSRR Registers

	if (Status == GPIO_PIN_SET) {
		GPIOx->BSRRL = GPIO_PIN;
	}
	if (Status == GPIO_PIN_RESET) {
		GPIOx->BSRRH = GPIO_PIN;
	}
}

static uint8_t ButtonRead_Status(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN) {
	uint8_t Read_Pin = 0x00;

	if ((GPIOx->IDR & GPIO_PIN) != (uint32_t) Bit_RESET) {
		Read_Pin = (uint8_t) Bit_SET;
	} else {
		Read_Pin = (uint8_t) Bit_RESET;
	}
	return Read_Pin;
}



static u8_t buttonReadStatus(GPIO_TypeDef *pGPIOx, u16_t wGPIO_Pin) {
	u8_t Read_Pin = Bit_RESET;

	if ((pGPIOx->IDR & wGPIO_Pin) != (u32_t) Bit_RESET) {
		Read_Pin = (u8_t) Bit_SET;
	} else {
		Read_Pin = (u8_t) Bit_RESET;
	}
	return Read_Pin;
}




int main(void) {
	u8_t byStatus = 1;
int meow=1;
int gau=1;
int cuctac=1;
int ha =1;
	uint8_t status = 1;
	LEDRED_init();
	LEDBLUE_init();
	LEDGREEN_init();
	Button_init();
	Button3_init();
	Button2_init();
	buzzer_Init();
	Button4_init();



	while (1) {

		if (ButtonRead_Status(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN) == BTN_PRESS) { //doc SW5
			delay();
			meow++;
		}


		if (ButtonRead_Status(BUTTON3_GPIO_PORT, BUTTON3_GPIO_PIN) == BTN_PRESS) {  //doc SW3
					delay();
					gau++;
				}


		if (ButtonRead_Status(BUTTON2_GPIO_PORT, BUTTON2_GPIO_PIN) == BTN_PRESS) {  //doc SW2

							buzzerControlSetStatus(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, GPIO_PIN_SET);
							delay1();
							cuctac++;
						}


		if (ButtonRead_Status(BUTTON4_GPIO_PORT, BUTTON4_GPIO_PIN) == BTN_PRESS) {  //doc SW4
//			delay();
 delay1();
 ha++;
 cuctac--;
//							LEDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_LOW);
//
//							LEDControl_SetStatus(LEDGREEN_GPIO_PORT, LEDGREEN_GPIO_PIN, GPIO_PIN_LOW);
//
//							LEDControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_LOW);
							//delay();
							//cuctac--;
						}

		if(meow %2==0) {

			LEDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_HIGH);
		}

		else {

			LEDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_LOW);
		}

		if(gau %2==0) {

					LEDControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_HIGH);
				}

				else {

					LEDControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_LOW);
				}

		if(cuctac >=2) {
			buzzerControlSetStatus(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, GPIO_PIN_RESET);
						delay1();
					LEDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_HIGH);
						delay1();
						LEDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_LOW);
						delay1();
					LEDControl_SetStatus(LEDGREEN_GPIO_PORT, LEDGREEN_GPIO_PIN, GPIO_PIN_HIGH);
						delay1();
					LEDControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_HIGH);
						delay1();
				}


			if(ha>=2){
//		//delay();
			LEDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_LOW);

								LEDControl_SetStatus(LEDGREEN_GPIO_PORT, LEDGREEN_GPIO_PIN, GPIO_PIN_LOW);

								LEDControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_LOW);

		}

	}
	//return 0;
}


