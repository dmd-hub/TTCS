#include <stm32f401re_exti.h>
#include <stm32f401re_syscfg.h>
#include <misc.h>
#include <stdint.h>
#include <temhumsensor.h>
#include <Ucglib.h>
#include <timer.h>
#include <stm32f401re_i2c.h>
#include <stm32f401re_spi.h>
#include <string.h>
#include <lightsensor.h>
#include <stdint.h>
#include <temhumsensor.h>
#include <Ucglib.h>
#include <timer.h>
#include <stm32f401re_gpio.h>
#include <stm32f401re_rcc.h>
#include <stdio.h>
#include <typedefs.h>

#include <stdint.h>
#include <stdio.h>
#include <stm32f401re_rcc.h>
#include <stm32f401re_adc.h>
#include <stm32f401re_gpio.h>
#include <stm32f401re_tim.h>
#include <timer.h>
#include <lightsensor.h>
#include <kalman_filter.h>
#include <Ucglib.h>
#include <ucg.h>
#include <string.h>
#define ADC_PORT				    		GPIOC
#define ADC_PIN             			    GPIO_Pin_5
#define Tim_Period      			  		8399
/* Private variables**************************************************************/
uint16_t AdcValue=0;
static uint16_t lightLevelAfterFilter = 0;
static uint16_t Kanman_light=0;
static char src3[20] = "";
static ucg_t ucg;
/* Private function prototypes****************************************************/
static void AppInitCommon(void);
static void LightSensor_AdcInit(void);
static void LedControl_TimerOCInit(void);
uint16_t LightSensor_AdcPollingRead(void);
uint16_t Kanman_Light(uint16_t lightLevel);
static void LedControl_TimerOCSetPwm(uint32_t Compare);
static void ABL_Process(void);



/* Private define*********************************************************/
// Define Logic GPIO_PIN
#define	LOW								0
#define BTN_PRESS							LOW
#define GPIO_PIN_SET									1
#define GPIO_PIN_RESET									0
#define GPIO_PIN_LOW									0
#define GPIO_PIN_HIGH									1

// Define LED GPIO pin
// LED GREEN1 - GREEN2
#define LEDGREEN1_GPIO_PIN								GPIO_Pin_5
#define LEDGREEN1_GPIO_PORT								GPIOA

#define LEDGREEN2_GPIO_PIN								GPIO_Pin_5
#define LEDGREEN2_GPIO_PORT								GPIOA
//-----------------------------------------------------------------


//-----------------------------------------------------------------
// BUZZER
#define BUZZER_GPIO_PIN									GPIO_Pin_9
#define BUZZER_GPIO_PORT								GPIOC
//-----------------------------------------------------------------
// Button B2
#define BUTTONB2_GPIO_PIN								GPIO_Pin_3
#define BUTTONB2_GPIO_PORT								GPIOB
// Button B3
#define BUTTONB3_GPIO_PIN								GPIO_Pin_4
#define BUTTONB3_GPIO_PORT								GPIOA
// Button B4
#define BUTTONB4_GPIO_PIN								GPIO_Pin_0
#define BUTTONB4_GPIO_PORT								GPIOB

#define SYSFG_Clock										RCC_APB2Periph_SYSCFG
/*Defined I2C ******************************************************************/

#define I2Cx_RCC							 RCC_APB1Periph_I2C1
#define I2Cx_SENSOR							 I2C1
#define I2C_GPIO_RCC		    			 RCC_AHB1Periph_GPIOB
#define I2C_GPIO							 GPIOB
#define I2C_PIN_SDA			    		 	 GPIO_Pin_9
#define I2C_PIN_SCL			    			 GPIO_Pin_8

/*Defined SENSOR ***************************************************************/

#define SI7020_ADDR                          0x40
#define CMDR_MEASURE_VALUE                   0xE0
#define CYCLE_SEND_DATA_1 1000

#define CYCLE_SEND_DATA_2 2000

/*
 * Structure Button*********************************************************/

/* Private variables*******************************************************/
uint8_t Status = 0;
uint32_t startTime = 0;
uint32_t startTimerB3 = 0;

/* Function prototypes*****************************************************/
static void LedBuzz_Init(void);
static void InterruptPA4_Init(void);
static void InterruptPB0_Init(void);
static void InterruptPB3_Init(void);
uint32_t GetTemp_Sensor();
uint32_t GetHumi_Sensor();
static void LedControl_SetStatus(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN_ID, uint8_t Status);
static void Toggled_5times(void);
static void BuzzerControl_SetBeep(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN, uint32_t num);
static void Blinkled_StatusPower(GPIO_TypeDef *GPIOx1, uint16_t GPIO_PIN_ID1,
								 GPIO_TypeDef *GPIOx2, uint16_t GPIO_PIN_ID2, uint32_t num);
uint32_t CalculatorTime(uint32_t dwTimeInit, uint32_t dwTimeCurrent);
void LedControl_TimPressRealease(void);
void delay_ms(uint32_t ms);
static void AppCommon();
static void SPI1_Init(void);

static void I2C_Init_temphumi(void);
void I2C_start(void);
void I2C_address_direction(uint8_t address, uint8_t direction);
void I2C_transmit(uint8_t byte);
void I2C_stop(void);
uint8_t I2C_receive_nack(void);
uint8_t I2C_receive_ack(void);
static void TemHumSensor_readRegister(
		uint8_t address,
	    uint8_t* pAddressRegister,
	    uint8_t* pDataRegister,
	    uint8_t Length_Data,
	    uint16_t delay);
void processGetValueSensor(void);
uint32_t GetTemp_Sensor(void);
uint32_t GetHumi_Sensor(void);
void delay_ms(uint32_t ms);
uint32_t CalculatorTime(uint32_t dwTimeInit, uint32_t dwTimeCurrent);
void Scan_SensorLCD(void);
void Scan_TimeSensor(uint32_t byRepeats);
/* Private variables ---------------------------------------------------------*/
static ucg_t ucg;
uint32_t time_initial = 0;
uint32_t time_current, time_initial;
uint32_t idTimer = 0;
static uint32_t time_total;
static char src1[20] = "";
static char src2[20] = "";
static char src4[20] = "";
static uint32_t time_total;
static uint8_t temperature, humidity;
static uint8_t temperature1, humidity1;
static void AppCommon()
{
	SystemCoreClockUpdate();
	TimerInit();
    SPI1_Init();
    I2C_Init_temphumi();
    TemHumSensor_Init();
    Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID); //là hàm kh?i t?o LCD.
    ucg_ClearScreen(&ucg);
    ucg_SetFont(&ucg, ucg_font_ncenR12_hr);
    ucg_SetColor(&ucg, 0, 255, 255, 255);
    ucg_SetColor(&ucg, 1, 0, 0, 0);
    ucg_SetRotate180(&ucg);
   //Scan_TimeSensor(5000);
    time_initial = GetMilSecTick();
}
static void SPI1_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStructure;

	/* GPIOA, GPIOB and GPIOC Clocks enable */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC, ENABLE);

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;


	GPIO_Init(GPIOA, &GPIO_InitStructure);


	GPIO_Init(GPIOB, &GPIO_InitStructure);


	GPIO_Init(GPIOC, &GPIO_InitStructure);
}

/**
 * @func   I2C_Init_temphumi
 * @brief  Init I2C temp and humi
 * @param  None
 * @retval None
 */
static void I2C_Init_temphumi(void)
{
// Initialization struct
	I2C_InitTypeDef I2C_InitStruct;
	GPIO_InitTypeDef GPIO_InitStruct;

	// Step 1: Initialize I2C
	RCC_APB1PeriphClockCmd(I2Cx_RCC, ENABLE);
	I2C_InitStruct.I2C_ClockSpeed = 400000;
	I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
	I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
	I2C_InitStruct.I2C_OwnAddress1 = 0x00;
	I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
	I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
	I2C_Init(I2Cx_SENSOR, &I2C_InitStruct);
	I2C_Cmd(I2Cx_SENSOR, ENABLE);

	// Step 2: Initialize GPIO as open drain alternate function
	RCC_AHB1PeriphClockCmd(I2C_GPIO_RCC, ENABLE);
	GPIO_InitStruct.GPIO_Pin = I2C_PIN_SCL | I2C_PIN_SDA;
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_OD;
	GPIO_InitStruct.GPIO_PuPd  = GPIO_PuPd_NOPULL;
	GPIO_Init(I2C_GPIO, &GPIO_InitStruct);

	/* Connect PXx to I2C_SCL */
	GPIO_PinAFConfig(I2C_GPIO, GPIO_PinSource8, GPIO_AF_I2C1);

	/* Connect PXx to I2C_SDA */
	GPIO_PinAFConfig(I2C_GPIO, GPIO_PinSource9, GPIO_AF_I2C1);
}

/*
 * @func    I2C_start
 * @brief   Generate I2C start condition
 * @param   None
 * @retval  None
 */
void I2C_start(void)
{
	// Wait until I2Cx is not busy anymore
	while (I2C_GetFlagStatus(I2Cx_SENSOR, I2C_FLAG_BUSY));

	// Generate start condition
	I2C_GenerateSTART(I2Cx_SENSOR, ENABLE);

	// Wait for I2C EV5.
	// It means that the start condition has been correctly released
	// on the I2C bus (the bus is free, no other devices is communicating))
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_MODE_SELECT));
}

/**
 * @func    I2C_address_direction
 * @brief   e
 * @param   None
 * @retval  None
 */
void I2C_address_direction(uint8_t address, uint8_t direction)
{
	// Send slave address
	I2C_Send7bitAddress(I2Cx_SENSOR, address, direction);

	// Wait for I2C EV6
	// It means that a slave acknowledges his address
	if (direction == I2C_Direction_Transmitter)		// truy?n
	{
		while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
	}
	else if (direction == I2C_Direction_Receiver)  // nh?n
	{
		while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
	}
}

/**
 * @func    I2C_transmit
 * @brief   Transmit one byte to I2C bus
 * @param   None
 * @retval  None
 */
void I2C_transmit(uint8_t byte)
{
	// Send data byte
	I2C_SendData(I2Cx_SENSOR, byte);
	// Wait for I2C EV8_2.
	// It means that the data has been physically shifted out and
	// output on the bus)
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
}

/**
 * @func    I2C_stop
 * @brief   Generate I2C stop condition
 * @param   None
 * @retval  None
 */
void I2C_stop(void)
{
	// Generate I2C stop condition
	I2C_GenerateSTOP(I2Cx_SENSOR, ENABLE);
}

/**
 * @func    I2C_receive_nack
 * @brief   receive data
 * @param   None
 * @retval  None
 */
uint8_t I2C_receive_nack(void)
{
	// Disable ACK of received data
	I2C_AcknowledgeConfig(I2Cx_SENSOR, DISABLE);
	// Wait for I2C EV7
	// It means that the data has been received in I2C data register
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_BYTE_RECEIVED));

	// Read and return data byte from I2C data register
	return I2C_ReceiveData(I2Cx_SENSOR);
}


/**
 * @func    I2C_receive_ack
 * @brief   receive data
 * @param   None
 * @retval  None
 */
uint8_t I2C_receive_ack(void)
{
	// Enable ACK of received data
	I2C_AcknowledgeConfig(I2Cx_SENSOR, ENABLE);
	// Wait for I2C EV7
	// It means that the data has been received in I2C data register
	while (!I2C_CheckEvent(I2Cx_SENSOR, I2C_EVENT_MASTER_BYTE_RECEIVED));

	// Read and return data byte from I2C data register
	return I2C_ReceiveData(I2Cx_SENSOR);
}

/**
 * @func    TemHumSensor_readRegister
 * @brief   communicate register in sensor
 * @param   None
 * @retval  None
 */
static void TemHumSensor_readRegister(
		uint8_t address,	// Đ?a ch? c?m bi?n.
	    uint8_t* pAddressRegister, // Đ?a ch? c?a thanh ghi ch?a d? li?u nhi?t d?, d? ?m.
	    uint8_t* pDataRegister, // D? li?u d?c du?c t? thanh ghi tuong ?ng.
	    uint8_t Length_Data, //Đ? dài D? li?u d?c du?c t? thanh ghi tuong ?ng.
	    uint16_t delay)	//D? li?u d?c du?c t? thanh ghi tuong ?ng.
{
	uint8_t LengthCmd = pAddressRegister[0];

	I2C_start();	// conditon start
	I2C_address_direction(address << 1, I2C_Direction_Transmitter); // send slave address - Transmit

	for (uint8_t i = 1; i < LengthCmd; i++) {
		I2C_transmit(pAddressRegister[i]);		// Send Data from register
	}

    if (delay > 0) {
        delay_ms(delay);
    }

	I2C_stop();// condition stop

	I2C_start(); // condition start
	I2C_address_direction(address << 1, I2C_Direction_Receiver); // send slave address - Received

	for (uint8_t i = 0; i < Length_Data; i++)
	{
		if (i == (Length_Data - 1))
		{
			pDataRegister[i] = I2C_receive_nack();  // 	NA
		}
		else
		{
			pDataRegister[i] = I2C_receive_ack();   // A
		}
	}
	I2C_stop();

}


/**
 * @func    GetTemp_Sensor
 * @brief   Get value temperature
 * @param   None
 * @retval  Temperature
 */
uint32_t GetTemp_Sensor(void)
{
	uint32_t RT;
    uint8_t pRT[3] = { 0 };	// pRT[0]: MSB		pRT[1]: LSB

    uint8_t CMD_MEASURE_TEMP[2] =  { 2, 0xE3 }; // g?i d? dài byte c?n truy?n và CMD_MEASURE ch? d? HOLD MASTER MODE

    TemHumSensor_readRegister(SI7020_ADDR, CMD_MEASURE_TEMP, pRT, 3, 4);

    RT = (pRT[0] << 8) + pRT[1];			// RT_CODE (MSB << 8) + LSB		// Temp = ((17572* RT)/(0xFFu +1) - 4685)/100
    RT = ((RT * 17572) >> 16) - 4685;
    RT = RT/100;
    return RT;
}


/**
 * @func    GetHumi_Sensor
 * @brief   Get value humidity
 * @param   None
 * @retval  Humidity
 */
uint32_t GetHumi_Sensor(void)
{
	uint32_t RH;
	uint8_t pRH[3] = { 0 };


	uint8_t CMD_MEASURE_HUMI[2] =  { 2, 0xE5 }; // g?i d? dài byte c?n truy?n và CMD_MEASURE ch? d? HOLD MASTER MODE

    TemHumSensor_readRegister(SI7020_ADDR, CMD_MEASURE_HUMI, pRH, 3, 8);

    RH = (pRH[0] << 8) + pRH[1]; // RH_CODE (MSB << 8) + LSB
    RH = ((RH * 12500) >> 16) - 600;
    RH = RH/100;

    return RH;
}


/**
 * @func 	processGetValueSensor
 * @brief	Get value sensor
 * @param	None
 * @retval	None
 */

void processGetValueSensor(void) {
	// Get timer
	time_current = GetMilSecTick();

	if (time_current >= time_initial) {
		time_total += time_current - time_initial;
	} else {
		time_total += 0xFFFFFFFFU - time_current + time_initial;
	}
	if (time_total == CYCLE_SEND_DATA_1) {
		//Dùng d? d?c giá tr? nhi?t d? tr? v? t? c?m bi?n thông qua giao ti?p I2C.
		temperature = (uint8_t) (GetTemp_Sensor());

		//Dùng d? d?c giá tr? d? ?m tr? v? t? c?m bi?n thông qua giao ti?p I2C.
		humidity = (uint8_t) (GetHumi_Sensor());

	}
	if(time_total >= CYCLE_SEND_DATA_2)
	{
		temperature1 = (uint8_t) (GetTemp_Sensor());

		humidity1 = (uint8_t) (GetHumi_Sensor());

		// n?u th?i gian chênh l?ch gi?a l?n do 1 và l?n do 2 là 2 th́ s? c?p nh?t giá tr? sensor
		if( ((temperature1 > temperature ) && (temperature1 - temperature >= 2))
		 || ((temperature1 < temperature ) && (temperature1 - temperature <= 2))
		 || ((humidity1 > humidity ) && (humidity1 - humidity >= 2))
		 || ((humidity1 < humidity ) && (humidity1 - humidity <= 2)))
		{
			ucg_DrawString(&ucg, 0, 32, 0, "Nhom 1");
			memset(src1, 0, sizeof(src1));
			sprintf(src1, " Nhiet Do = %d oC  ", temperature1);
			ucg_DrawString(&ucg, 0, 52, 0, src1);

			memset(src2, 0, sizeof(src2));
			sprintf(src2, " Do Am = %3d %%   ", humidity1);
			ucg_DrawString(&ucg, 0, 72, 0, src2);

			memset(src3, 0, sizeof(src3));
			sprintf(src3, " Light = %d lux  ", Kanman_light);
			ucg_DrawString(&ucg, 0, 92, 0, src3);
		}

		time_total = 0;
		// Reset l?i bi?n th?i gian sau quá tŕnh d?c giá tr? nhi?t d? - d? ?m.

	}
	time_initial = time_current;



}
void Scan_SensorLCD(void)
{
	ucg_DrawString(&ucg, 0, 32, 0, "Nhom 1");
	memset(src3, 0, sizeof(src3));
	sprintf(src3, " Nhiet Do = %d oC  ", temperature);
	ucg_DrawString(&ucg, 0, 52, 0, src3);

	memset(src4, 0, sizeof(src4));
	sprintf(src4, " Do Am = %3d %%   ", humidity);
	ucg_DrawString(&ucg, 0, 72, 0, src4);
	memset(src3, 0, sizeof(src3));
	sprintf(src3, " Light = %d lux  ", Kanman_light);
	ucg_DrawString(&ucg, 0, 92, 0, src3);
}
//
#define LEDRED_GPIO_PORT					GPIOB
#define LEDRED_GPIO_PIN						GPIO_Pin_13
#define LEDRED_PIN9							13
#define LEDREDControl_SetClock				RCC_AHB1Periph_GPIOB

#define LEDBLUE_GPIO_PORT					GPIOA
#define LEDBLUE_GPIO_PIN						GPIO_Pin_10
#define LEDBLUE_PIN10							10
#define LEDBLUEControl_SetClock				RCC_AHB1Periph_GPIOA


#define LEDGREEN_GPIO_PORT					GPIOA
#define LEDGREEN_GPIO_PIN						GPIO_Pin_0
#define LEDGREEN_PIN0						0
#define LEDGREENControl_SetClock				RCC_AHB1Periph_GPIOA


#define BUTTON_GPIO_PORT					GPIOB
#define BUTTON_GPIO_PIN						GPIO_Pin_4
#define BUTTON_PIN4							4
#define BUTTONControl_SetClock				RCC_AHB1Periph_GPIOB

#define BUTTON3_GPIO_PORT					GPIOA
#define BUTTON3_GPIO_PIN						GPIO_Pin_4
#define BUTTON3_PIN4							4
#define BUTTON3Control_SetClock				RCC_AHB1Periph_GPIOA


#define BUTTON2_GPIO_PORT					GPIOB
#define BUTTON2_GPIO_PIN						GPIO_Pin_3
#define BUTTON2_PIN4							3
#define BUTTON2Control_SetClock				RCC_AHB1Periph_GPIOB

#define BUTTON4_GPIO_PORT					GPIOB
#define BUTTON4_GPIO_PIN						GPIO_Pin_0
#define BUTTON4_PIN0							0
#define BUTTON4Control_SetClock				RCC_AHB1Periph_GPIOB


#define BUZZER_GPIO_PORT					GPIOC
#define BUZZER_GPIO_PIN						GPIO_Pin_9
#define BUZZERControl_SetClock				RCC_AHB1Periph_GPIOC


static void_t buzzer_Init(void_t);
static void_t buzzerControlSetStatus(GPIO_TypeDef *pGPIOx, u16_t wGPIO_Pin, u8_t byStatus);

static void_t buzzer_Init(void_t) {
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(BUZZERControl_SetClock, ENABLE);


	GPIO_InitStructure.GPIO_Pin = BUZZER_GPIO_PIN;


	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;


	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;


	GPIO_Init(BUZZER_GPIO_PORT, &GPIO_InitStructure);

}


static void_t buzzerControlSetStatus(GPIO_TypeDef *pGPIOx, u16_t wGPIO_Pin,
		u8_t byStatus) {
	// SET bit in BSRR Registers

	if (byStatus == GPIO_PIN_SET) {
		pGPIOx->BSRRL = wGPIO_Pin;
	}
	if (byStatus == GPIO_PIN_RESET) {
		pGPIOx->BSRRH = wGPIO_Pin;
	}
}



void delay() {
	for (uint32_t i = 0; i < 500000; i++)
		;
}


void delay1() {
	for (uint32_t i = 0; i < 300000; i++)
		;
}

static void LEDRED_init(void) {
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDREDControl_SetClock, ENABLE);

	// chon chan su dung chuc nang dieu khien led

	GPIO_InitStructure.GPIO_Pin = LEDRED_GPIO_PIN;

	//Chon chan dieu khien led che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;

	// khoi tao cac gia tri

	GPIO_Init(LEDRED_GPIO_PORT, &GPIO_InitStructure);

}


static void LEDBLUE_init(void) {
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDBLUEControl_SetClock, ENABLE);

	// chon chan su dung chuc nang dieu khien led

	GPIO_InitStructure.GPIO_Pin = LEDBLUE_GPIO_PIN;

	//Chon chan dieu khien led che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;

	// khoi tao cac gia tri

	GPIO_Init(LEDBLUE_GPIO_PORT, &GPIO_InitStructure);

}

static void LEDGREEN_init(void) {
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A
	RCC_AHB1PeriphClockCmd(LEDGREENControl_SetClock, ENABLE);

	// chon chan su dung chuc nang dieu khien led

	GPIO_InitStructure.GPIO_Pin = LEDGREEN_GPIO_PIN;

	//Chon chan dieu khien led che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;

	// PUSH PULL

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;

	// trang thai ban dau tren chan la Pull down

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;

	// khoi tao cac gia tri

	GPIO_Init(LEDGREEN_GPIO_PORT, &GPIO_InitStructure);

}



static void Button_init(void) {   //BUTTON5
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A

	RCC_AHB1PeriphClockCmd(BUTTONControl_SetClock, ENABLE);

	// chon chan su dung chuc nang dieu khien nut nhan

	GPIO_InitStructure.GPIO_Pin = BUTTON_GPIO_PIN;

	//Chon chan dieu khien nut che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	// speed cÃ ng cao xung cÃ ng cao thÃ¬ xung cÃ ng thoáº£i

	// trang thai ban dau tren chan la Pull up

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;

	// khoi tao cac gia tri

	GPIO_Init(BUTTON_GPIO_PORT, &GPIO_InitStructure);
}


static void Button3_init(void) {
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A

	RCC_AHB1PeriphClockCmd(BUTTON3Control_SetClock, ENABLE);

	// chon chan su dung chuc nang dieu khien nut nhan

	GPIO_InitStructure.GPIO_Pin = BUTTON3_GPIO_PIN;

	//Chon chan dieu khien nut che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	// speed cÃ ng cao xung cÃ ng cao thÃ¬ xung cÃ ng thoáº£i

	// trang thai ban dau tren chan la Pull up

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;

	// khoi tao cac gia tri

	GPIO_Init(BUTTON3_GPIO_PORT, &GPIO_InitStructure);
}

static void Button2_init(void) {
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A

	RCC_AHB1PeriphClockCmd(BUTTON2Control_SetClock, ENABLE);

	// chon chan su dung chuc nang dieu khien nut nhan

	GPIO_InitStructure.GPIO_Pin = BUTTON2_GPIO_PIN;

	//Chon chan dieu khien nut che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	// speed cÃ ng cao xung cÃ ng cao thÃ¬ xung cÃ ng thoáº£i

	// trang thai ban dau tren chan la Pull up

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;

	// khoi tao cac gia tri

	GPIO_Init(BUTTON2_GPIO_PORT, &GPIO_InitStructure);
}


static void Button4_init(void) {
	// Khai bao bien thuoc kieu struct
	GPIO_InitTypeDef GPIO_InitStructure;

	// Cap xung clock hoat dong cho port A

	RCC_AHB1PeriphClockCmd(BUTTON4Control_SetClock, ENABLE);

	// chon chan su dung chuc nang dieu khien nut nhan

	GPIO_InitStructure.GPIO_Pin = BUTTON4_GPIO_PIN;

	//Chon chan dieu khien nut che do output

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;

	// Toc do xu ly

	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	// speed cÃ ng cao xung cÃ ng cao thÃ¬ xung cÃ ng thoáº£i

	// trang thai ban dau tren chan la Pull up

	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;

	// khoi tao cac gia tri

	GPIO_Init(BUTTON4_GPIO_PORT, &GPIO_InitStructure);
}



static void LEDControl_SetStatus(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN,
		uint8_t Status) {
	// SET bit in BSRR Registers

	if (Status == GPIO_PIN_SET) {
		GPIOx->BSRRL = GPIO_PIN;
	}
	if (Status == GPIO_PIN_RESET) {
		GPIOx->BSRRH = GPIO_PIN;
	}
}

static uint8_t ButtonRead_Status(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN) {
	uint8_t Read_Pin = 0x00;

	if ((GPIOx->IDR & GPIO_PIN) != (uint32_t) Bit_RESET) {
		Read_Pin = (uint8_t) Bit_SET;
	} else {
		Read_Pin = (uint8_t) Bit_RESET;
	}
	return Read_Pin;
}



static u8_t buttonReadStatus(GPIO_TypeDef *pGPIOx, u16_t wGPIO_Pin) {
	u8_t Read_Pin = Bit_RESET;

	if ((pGPIOx->IDR & wGPIO_Pin) != (u32_t) Bit_RESET) {
		Read_Pin = (u8_t) Bit_SET;
	} else {
		Read_Pin = (u8_t) Bit_RESET;
	}
	return Read_Pin;
}


//--------------------------------------------------------------------------------------------
int main(void) {
	AppInitCommon();
	u8_t byStatus = 1;
	int meow=1;
	int gau=1;
	int cuctac=1;
	int ha =1;
		uint8_t status = 1;
		LEDRED_init();
		LEDBLUE_init();
		LEDGREEN_init();
		Button_init();
		Button3_init();
		Button2_init();
		buzzer_Init();
		Button4_init();

	AppCommon();
	Blinkled_StatusPower(LEDGREEN1_GPIO_PORT, LEDGREEN1_GPIO_PIN,
	LEDGREEN2_GPIO_PORT, LEDGREEN2_GPIO_PIN, 2);
	while (1) {
		Toggled_5times();
		processGetValueSensor();
		processTimerScheduler();
		ABL_Process();

		if (ButtonRead_Status(BUTTON_GPIO_PORT, BUTTON_GPIO_PIN) == BTN_PRESS) { //doc SW5
				delay();
				meow++;
			}


			if (ButtonRead_Status(BUTTON3_GPIO_PORT, BUTTON3_GPIO_PIN) == BTN_PRESS) {  //doc SW3
						delay();
						gau++;
					}


			if (ButtonRead_Status(BUTTON2_GPIO_PORT, BUTTON2_GPIO_PIN) == BTN_PRESS) {  //doc SW2

								buzzerControlSetStatus(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, GPIO_PIN_SET);
								delay1();
								cuctac++;
							}


			if (ButtonRead_Status(BUTTON4_GPIO_PORT, BUTTON4_GPIO_PIN) == BTN_PRESS) {  //doc SW4
	//			delay();
	 delay1();
	 ha++;
	 cuctac--;
	//							LEDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_LOW);
	//
	//							LEDControl_SetStatus(LEDGREEN_GPIO_PORT, LEDGREEN_GPIO_PIN, GPIO_PIN_LOW);
	//
	//							LEDControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_LOW);
								//delay();
								//cuctac--;
							}

			if(meow %2==0) {

				LEDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_HIGH);
			}

			else {

				LEDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_LOW);
			}

			if(gau %2==0) {

						LEDControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_HIGH);
					}

					else {

						LEDControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_LOW);
					}

			if(cuctac >=2) {
				buzzerControlSetStatus(BUZZER_GPIO_PORT, BUZZER_GPIO_PIN, GPIO_PIN_RESET);
							delay1();
						LEDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_HIGH);
							delay1();
							LEDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_LOW);
							delay1();
						LEDControl_SetStatus(LEDGREEN_GPIO_PORT, LEDGREEN_GPIO_PIN, GPIO_PIN_HIGH);
							delay1();
						LEDControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_HIGH);
							delay1();
					}


				if(ha>=2){
	//		//delay();
				LEDControl_SetStatus(LEDRED_GPIO_PORT, LEDRED_GPIO_PIN, GPIO_PIN_LOW);

									LEDControl_SetStatus(LEDGREEN_GPIO_PORT, LEDGREEN_GPIO_PIN, GPIO_PIN_LOW);

									LEDControl_SetStatus(LEDBLUE_GPIO_PORT, LEDBLUE_GPIO_PIN, GPIO_PIN_LOW);

			}

		}

	}


/**
 * @func   delay_ms
 * @brief  delay milisecon
 * @param  None
 * @retval None
 */
void delay_ms(uint32_t ms) {

	uint32_t startTime = GetMilSecTick(); //Luu l?i th?i di?m hi?n t?i.
	while (CalculatorTime(startTime, GetMilSecTick()) <= ms)
		;

//	Đ?i cho d?n khi h?t kho?ng time cài d?t

}

/**
 * @func   LedBuzz_Init
 * @brief  Init Buuzzer and Led
 * @param  None
 * @retval None
 */
static void LedBuzz_Init(void) {
	//Declare type variable GPIO Struct------------------------------------------------
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_AHB1PeriphClockCmd(
			RCC_AHB1Periph_GPIOA | RCC_AHB1Periph_GPIOB | RCC_AHB1Periph_GPIOC,
			ENABLE);

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;


}

/**
 * @func   InterruptPA4_Init
 * @brief  Init Interrupt
 * @param  None
 * @retval None
 */
static void InterruptPA4_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

// Enable Clock Port A;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStructure.GPIO_Pin = BUTTONB3_GPIO_PIN;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;

	GPIO_Init(BUTTONB3_GPIO_PORT, &GPIO_InitStructure);

//  Enable Clock Syscfg, Connect EXTI Line 4 to PA4 pin

	RCC_APB2PeriphClockCmd(SYSFG_Clock, ENABLE);
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource4);

//	Configuration Interrupt

	EXTI_InitStructure.EXTI_Line = EXTI_Line4;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);

// Configuration NVIC

	NVIC_InitStructure.NVIC_IRQChannel = EXTI4_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x03;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

	NVIC_Init(&NVIC_InitStructure);
}

/**
 * @func   InterruptPB0_Init
 * @brief  Init Interrupt
 * @param  None
 * @retval None
 */
static void InterruptPB0_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

// Enable Clock Port B;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStructure.GPIO_Pin = BUTTONB4_GPIO_PIN;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;

	GPIO_Init(BUTTONB4_GPIO_PORT, &GPIO_InitStructure);

//  Enable Clock Syscfg, Connect EXTI Line 0 to PB0 pin

	RCC_APB2PeriphClockCmd(SYSFG_Clock, ENABLE);

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource0);

//	Configuration Interrupt

	EXTI_InitStructure.EXTI_Line = EXTI_Line0;
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);

// Configuration NVIC

	NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x02;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

	NVIC_Init(&NVIC_InitStructure);
}

/**
 * @func   InterruptPB3_Init
 * @brief  Init Interrupt
 * @param  None
 * @retval None
 */
static void InterruptPB3_Init(void) {
	GPIO_InitTypeDef GPIO_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

// Enable Clock Port C;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
	GPIO_InitStructure.GPIO_Pin = BUTTONB2_GPIO_PIN;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;

	GPIO_Init(BUTTONB2_GPIO_PORT, &GPIO_InitStructure);

//  Enable Clock Syscfg, Connect EXTI Line 3 to PB3 pin

	RCC_APB2PeriphClockCmd(SYSFG_Clock, ENABLE);
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource3);

//	Configuration Interrupt

	EXTI_InitStructure.EXTI_Line = EXTI_Line3;

	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising_Falling;
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
	EXTI_Init(&EXTI_InitStructure);

// Configuration NVIC

	NVIC_InitStructure.NVIC_IRQChannel = EXTI3_IRQn;
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;

	NVIC_Init(&NVIC_InitStructure);
}

/**
 * @func   EXTI4_IRQHandler
 * @brief  Interrupt line 4
 * @param  None
 * @retval None
 */
void EXTI4_IRQHandler(void) {
	if (EXTI_GetFlagStatus(EXTI_Line4) == SET) {
		if (GPIO_ReadInputDataBit(BUTTONB3_GPIO_PORT,BUTTONB3_GPIO_PIN)== GPIO_PIN_RESET) {
			startTimerB3 = GetMilSecTick();	// Luu th?i gian nh?n nút
		}
		else
		{
			Status++;						// Khi nh? nút th́ bi?n tang
		}
	}
	//xóa c? ng?t sau khi th?c hi?n xong chuong tŕnh ng?t.
	EXTI_ClearITPendingBit(EXTI_Line4);
}

/**
 * @func   EXTI3_IRQHandler
 * @brief  Interrupt line 3
 * @param  None
 * @retval None
 */


/**
 * @func   EXTI0_IRQHandler
 * @brief  Interrupt line 0
 * @param  None
 * @retval None
 */


/**
 * @func   LedControl_SetStatus
 * @brief  set status LED
 * @param  None
 * @retval None
 */
static void LedControl_SetStatus(GPIO_TypeDef *GPIOx, uint16_t GPIO_PIN,
		uint8_t Status) {
	// SET bit in BSRR Registers

	if (Status == GPIO_PIN_SET) {
		GPIOx->BSRRL = GPIO_PIN;
	}
	if (Status == GPIO_PIN_RESET) {
		GPIOx->BSRRH = GPIO_PIN;
	}
}

/**
 * @func   BuzzerControl_SetBeep
 * @brief  set status buzzer
 * @param  None
 * @retval None
 */


/**
 * @func   CalculatorTime
 * @brief  Caculator time button
 * @param  None
 * @retval None
 */
uint32_t CalculatorTime(uint32_t dwTimeInit, uint32_t dwTimeCurrent) {
	uint32_t dwTimeTotal;
	if (dwTimeCurrent >= dwTimeInit) {
		dwTimeTotal = dwTimeCurrent - dwTimeInit;
	} else {
		dwTimeTotal = 0xFFFFFFFFU + dwTimeCurrent - dwTimeInit;
	}
	return dwTimeTotal;

}

/**
 * @func   Toggled_5times
 * @brief  Toggle led number times
 * @param  None
 * @retval None
 */
static void Toggled_5times(void) {
	if (Status == 5) {
		delay_ms(200);
		Blinkled_StatusPower(LEDGREEN1_GPIO_PORT, LEDGREEN1_GPIO_PIN,
		LEDGREEN2_GPIO_PORT, LEDGREEN2_GPIO_PIN, 2);

		Status = 0;
	}
	else
	{
		if(CalculatorTime(startTimerB3, GetMilSecTick()) > 500) // Ki?m tra kho?ng th?i gian gi?a các l?n nh?n nút
		{
			Status = 0;
		}
	}
}

/**
 * @func   Blinkled_StatusPower
 * @brief  Led blink
 * @param  None
 * @retval None
 */
static void Blinkled_StatusPower(GPIO_TypeDef *GPIOx1, uint16_t GPIO_PIN_ID1,
		GPIO_TypeDef *GPIOx2, uint16_t GPIO_PIN_ID2, uint32_t num) {
	for (uint32_t i = 0; i < num; i++) {
		LedControl_SetStatus(GPIOx1, GPIO_PIN_ID1, GPIO_PIN_HIGH);
		LedControl_SetStatus(GPIOx2, GPIO_PIN_ID2, GPIO_PIN_HIGH);
		delay_ms(100);
		LedControl_SetStatus(GPIOx1, GPIO_PIN_ID1, GPIO_PIN_LOW);
		LedControl_SetStatus(GPIOx2, GPIO_PIN_ID2, GPIO_PIN_LOW);
		delay_ms(100);
	}
}

/**
 * @func   AppInitCommon
 * @brief  Application initializer
 * @param  None
 * @retval None
 */
static void AppInitCommon(void)
{
	SystemCoreClockUpdate(); 	//Cß¦Ñp nguß+ôn clock cho vi -æiß+üu khiß+ân l+á 84 Mhz.
	TimerInit();				//Khß+ƒi tß¦ío timer sß+¡ dß+Ñng system tick.
	LightSensor_AdcInit();		//Khß+ƒi tß¦ío ngoß¦íi vi ADC ß+ƒ chß¦+ -æß+Ö Polling.
	LedControl_TimerOCInit();   //Khß+ƒi tß¦ío ngoß¦íi vi TIMER ß+ƒ chß¦+ -æß+Ö b-âm xung Output Compare.

	KalmanFilterInit(2, 2, 0.001); // Khß+ƒi tß¦ío bß+Ö lß+ìc Kalman

	Ucglib4WireSWSPI_begin(&ucg, UCG_FONT_MODE_SOLID);
	ucg_SetFont(&ucg, ucg_font_ncenR10_hf);
	ucg_ClearScreen(&ucg);
	ucg_SetColor(&ucg, 0, 255, 255, 255);
	ucg_SetColor(&ucg, 1, 0, 0, 0);
	ucg_SetRotate180(&ucg);

}

/**
 * @func   LightSensor_AdcInit
 * @brief  Light Sensor ADC Polling initialize
 * @param  None
 * @retval None
 */
static void LightSensor_AdcInit(void)
{
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	ADC_InitTypeDef ADC_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable peripheral clocks ***********************************************/
	RCC_APB2PeriphClockCmd(ADCx_CLK, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	GPIO_InitStructure.GPIO_Pin = ADC_PIN;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(ADC_PORT, &GPIO_InitStructure);

	/* ADC Deinit ***************************************************/
	ADC_DeInit();

	/* ADC Common Init ********************************************************/
	ADC_CommonInitStructure.ADC_Mode = ADC_Mode_Independent;
	ADC_CommonInitStructure.ADC_Prescaler = ADC_Prescaler_Div2;
	ADC_CommonInitStructure.ADC_DMAAccessMode = ADC_DMAAccessMode_Disabled;
	ADC_CommonInitStructure.ADC_TwoSamplingDelay = ADC_TwoSamplingDelay_5Cycles;
	ADC_CommonInit(&ADC_CommonInitStructure);

	/* ADC1 Init **************************************************************/
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
	ADC_InitStructure.ADC_ScanConvMode = DISABLE;
	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
	ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfConversion = 1;
	ADC_Init(ADC1, &ADC_InitStructure);

	//Polling Configure
	ADC_EOCOnEachRegularChannelCmd(ADC1, ENABLE);
	ADC_ContinuousModeCmd(ADC1, DISABLE);
	ADC_DiscModeChannelCountConfig(ADC1, 1);
	ADC_DiscModeCmd(ADC1, ENABLE);


	/* ADC1 regular channel15 configuration ************************************/
	ADC_RegularChannelConfig(ADC1, ADC_Channel_15, 1, ADC_SampleTime_15Cycles);

	/* Enable ADC1 */
	ADC_Cmd(ADC1, ENABLE);
}

/**
 * @func   LedControl_TimerOCInit
 * @brief  Control Led with Timer Output Capture
 * @param  None
 * @retval None
 */
static void LedControl_TimerOCInit(void)
{
	GPIO_InitTypeDef 			GPIO_InitStruct;
	TIM_TimeBaseInitTypeDef 	TIM_TimeBaseInitStruct;
	TIM_OCInitTypeDef			TIM_OC_InitStruct;


	// GPIO Configure
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;

	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_11;
	GPIO_Init(GPIOA, &GPIO_InitStruct);

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource11, GPIO_AF_TIM1);

	//TimeBase Configure

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);

	TIM_TimeBaseInitStruct.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInitStruct.TIM_Prescaler = 0;

	/************************************************************************
	 * 	FPwm = Fclk / (ARR+1) * (PSC + 1)																	*
	 ************************************************************************/
	TIM_TimeBaseInitStruct.TIM_Period = 8399; // ARR = 8399
	TIM_TimeBaseInitStruct.TIM_ClockDivision = 0;
	TIM_TimeBaseInit(TIM1, &TIM_TimeBaseInitStruct);


	//TimeIC Configure
	TIM_OC_InitStruct.TIM_OCMode = TIM_OCMode_PWM2;
	TIM_OC_InitStruct.TIM_OutputState = TIM_OutputState_Enable;
	TIM_OC_InitStruct.TIM_Pulse = 0;
	TIM_OC_InitStruct.TIM_OCPolarity = TIM_OCPolarity_Low;

	TIM_OC4Init(TIM1, &TIM_OC_InitStruct);

	TIM_Cmd(TIM1, ENABLE);


	TIM_CtrlPWMOutputs(TIM1, ENABLE);
}

/**
 * @func   LightSensor_AdcPollingRead
 * @brief  Read value from ADC
 * @param  None
 * @retval None
 */
uint16_t LightSensor_AdcPollingRead(void)
{
	uint16_t result = 0;

	//  Bß¦»t -æß¦ºu qu+í tr+¼nh chuyß+ân -æß+òi dß+» liß+çu ADC.
	ADC_SoftwareStartConv(ADCx_SENSOR);

	// -Éß+úi qu+í tr+¼nh chuyß+ân -æß+òi -æ¦¦ß+úc ho+án tß¦Ñt -æß+â -æß+ìc dß+» liß+çu.
	while (ADC_GetFlagStatus(ADCx_SENSOR, ADC_FLAG_EOC) == RESET);

	// Read value
	result = ADC_GetConversionValue(ADCx_SENSOR);

	return result;

}

/**
 * @func   Kanman_Light
 * @brief  Use Kanman filter for Light Sensor
 * @param  None
 * @retval None
 */
uint16_t Kanman_Light(uint16_t lightLevel)
{
	lightLevelAfterFilter = KalmanFilter_updateEstimate(lightLevel);

	return lightLevelAfterFilter;
}

/**
 * @func   LedControl_TimerOCSetPwm
 * @brief  Control Led with PWM
 * @param  None
 * @retval None
 */
static void LedControl_TimerOCSetPwm(uint32_t Compare)
{
	TIM_SetCompare4(TIM1,Compare);
}
/**
 * @func   ABL_Process
 * @brief  AutoBrightness use Light Sensor
 * @param  None
 * @retval None
 */
static void ABL_Process(void)
{
	uint32_t dwTimeCurrent;
	static uint32_t dwTimeTotal, dwTimeInit;

	dwTimeCurrent = GetMilSecTick();

	if(dwTimeCurrent >= dwTimeInit)
	{
		dwTimeTotal += dwTimeCurrent - dwTimeInit;
	}
	else
	{
		dwTimeTotal += 0xFFFFFFFFU - dwTimeCurrent + dwTimeInit;
	}

	if(dwTimeTotal >= 100)
	{
		dwTimeTotal = 0;
		AdcValue  = LightSensor_AdcPollingRead(); //-Éß+ìc gi+í trß+ï ADC -æo -æ¦¦ß+úc tß+½ cß¦úm biß¦+n +ính s+íng
		Kanman_light = Kanman_Light(AdcValue);


		LedControl_TimerOCSetPwm(Kanman_light);

	}
	dwTimeInit = dwTimeCurrent;
}
/**
 * @func   LedControl_TimPress
 * @brief  Control led with state button
 * @param  None
 * @retval None
 */
